Java Programming

4) 제어 흐름 이해하기

4-2) 반복문(Loop)
: while문, do-while문, for문

-------------------------------------------------------------------------------
package chap4;

public class BasicLoop {
	public static void main(String[] args) {
		int num = 1;
		num += 2;
		num += 3;
		num += 4;
		num += 5;
		num += 6;
		num += 7;
		num += 8;
		num += 9;
		num += 10;
		
		System.out.println("1부터 10까지의 합은 "+ num + "입니다.");
	}
}
-------------------------------------------------------------------------------
1부터 10까지의 합은 55입니다.
-------------------------------------------------------------------------------
=> 이렇게 작성하는 방법은 매우 비효율적이다.


1) while문
: while문은 조건식이 참인 동안 수행문을 반복하게 된다.

-------------------------------------------------------------------------------
while(조건식) {
    수행문1;

} 
	수행문2;
-------------------------------------------------------------------------------
=> 조건식을 만족하는 동안 중괄호{} 안의 수행문을 반복 처리한다. 


-------------------------------------------------------------------------------
package chap4;

public class WhileExample1 {
	public static void main(String[] args) {
		int num = 1;
		int sum = 0;
		
		while(num <= 10) {	//num 값이 10보다 작거나 같을 동안
			sum += num;		//합계를 뜻하는 sum에 num을 더하고
			num++;			//num에 1씩 더해 나감
		}
		System.out.println("1부터 10까지의 합은 "+ sum + "입니다.");
	}
}

-------------------------------------------------------------------------------
1부터 10까지의 합은 55입니다.
-------------------------------------------------------------------------------

** while문이 무한히 반복되는 경우
: 특정 조건을 만족하는 동안 반복되는 명령을 수행하고, 그렇지 않으면 수행을 중단한 후 while문을 빠져나온다.

= 웹 서버처럼 끊임없이 돌아가는 시스템을 데몬(demon)이라 부른다. 데몬 서비스를 구현할 때 무한 반복을 사용한다.
-------------------------------------------------------------------------------
while(true) {
	...
}
-------------------------------------------------------------------------------
=> while문의 구조를 보면 조건식이 참이면 반복한다.


2) do-while문
: {}안의 문장을 무조건 한 번 수행한 후에 조건식을 검사한다. 
  즉, 조건이 만족하는지 여부를 마지막에 검사한다.
=> 중괄호 안의 문장을 반드시 한 번 이상 수행해야 할 경우, while문 대신 do-while문을 사용한다.

-------------------------------------------------------------------------------
do{
   수행문1;
   ...
} while(조건식);
   수행문2;
   ...
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
package chap4;

public class DoWhileExample {
	public static void main(String[] args) {
		int num = 1;
		int sum = 0;
		
		do {
			sum += num;		//조건식이 참이 아니더라도 무조건 한 번 수행함.
			num++;
		} while(num <= 10);
		
		System.out.println("1부터 10까지의 합은 "+ sum + "입니다.");
	}
}
-------------------------------------------------------------------------------
1부터 10까지의 합은 55입니다.
-------------------------------------------------------------------------------


3) for문
: 반복문 중에서 가장 많이 사용하는 반복문이다.

** for문의 기본 구조
-------------------------------------------------------------------------------
for(초기화식; 조건식; 증감식;) {
	수행문;
}
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
package chap4;

public class ForExample1 {
	public static void main(String[] args) {
		int i;
		int sum;
		for(i = 1, sum = 0; i <= 10; i++) {
			sum += i;
		}
		
		System.out.println("1부터 10까지의 합은 "+ sum + "입니다.");
	}
}
-------------------------------------------------------------------------------
1부터 10까지의 합은 55입니다.
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
package chap4;

public class ForExample2 {
	public static void main(String[] args) {
		int i;
		for(i = 1; i <= 10; i++) {
			System.out.println("안녕하세요"+i);
		}
	}
}
-------------------------------------------------------------------------------
: 안녕하세요1 ~ 안녕하세요10 까지 출력한다!


** for문을 자주 사용하는 이유
: 반복 횟수를 관리할 수 있기 때문이다. 
-------------------------------------------------------------------------------
int num = 1;	//초기화				int sum = 0;
int sum = 0;						for(int num =1; num <= 10; num++) {
while(num <= 10) { //조건 비교			    sum += num;
   sum += num;						}
   num++;		//증감식				
}									
-------------------------------------------------------------------------------
while문으로 구현						for문으로 구현
-------------------------------------------------------------------------------
=> 초기화, 조건식, 증감식을 한 번에 작성할 수 있기에 가독성이 올라간다.

*** for문은 배열과 함께 자주 사용한다. (배열은 7장에서 자세히)


- for문 요소 생략하기
: 코드가 생략되면 불필요하게 작성할 필요가 사라진다.

1. 초기화식 생략
int i = 0;
for( ; i < 5; i++) { //초기화식 생략
	...
}

2. 조건식 생략 : for문 안에 if문을 사용하면 된다.
for( i = 0; ; i++) {
	sum += i;
	if(sum > 200) break;
}

3. 증감식 생략
for( i = 0; i < 5; ) {
	...
	i = (++i) % 10;
}

4. 요소 모두 생략
for( ; ; ) {
	...
}


* 중첩되는 반복문
-------------------------------------------------------------------------------
package chap4;

public class NestedLoop {
	public static void main(String[] args) {
		int dan;
		int times;
		
		for(dan = 2; dan <= 9; dan++) {
			for(times = 1; times <= 9; times++) {
				System.out.println(dan + " X " + times + " = " + dan * times);
			}
			
			System.out.println( ); //한 줄 띄워서 출력
		}
	}
}
-------------------------------------------------------------------------------
2 X 1 = 2
2 X 2 = 4
2 X 3 = 6
2 X 4 = 8
2 X 5 = 10
2 X 6 = 12
2 X 7 = 14
2 X 8 = 16
2 X 9 = 18

3 X 1 = 3
3 X 2 = 6
3 X 3 = 9
3 X 4 = 12
3 X 5 = 15
3 X 6 = 18
3 X 7 = 21
3 X 8 = 24
3 X 9 = 27

4 X 1 = 4
4 X 2 = 8
4 X 3 = 12
4 X 4 = 16
4 X 5 = 20
4 X 6 = 24
4 X 7 = 28
4 X 8 = 32
4 X 9 = 36

5 X 1 = 5
5 X 2 = 10
5 X 3 = 15
5 X 4 = 20
5 X 5 = 25
5 X 6 = 30
5 X 7 = 35
5 X 8 = 40
5 X 9 = 45

6 X 1 = 6
6 X 2 = 12
6 X 3 = 18
6 X 4 = 24
6 X 5 = 30
6 X 6 = 36
6 X 7 = 42
6 X 8 = 48
6 X 9 = 54

7 X 1 = 7
7 X 2 = 14
7 X 3 = 21
7 X 4 = 28
7 X 5 = 35
7 X 6 = 42
7 X 7 = 49
7 X 8 = 56
7 X 9 = 63

8 X 1 = 8
8 X 2 = 16
8 X 3 = 24
8 X 4 = 32
8 X 5 = 40
8 X 6 = 48
8 X 7 = 56
8 X 8 = 64
8 X 9 = 72

9 X 1 = 9
9 X 2 = 18
9 X 3 = 27
9 X 4 = 36
9 X 5 = 45
9 X 6 = 54
9 X 7 = 63
9 X 8 = 72
9 X 9 = 81
-------------------------------------------------------------------------------
=> 1. 외부 반복 수행 2. 내부 반복 수행  -  외부문을 수행하고 내부문을 수행완료하면 끝이 난다.


*** 어떤 것이 좋을지???(while문, do-while문, for문)
1) 반복 횟수가 정해진 경우, for문을 사용하는 것이 좋다.
2) 수행문을 반드시 한 번 이상 수행해야 하는 경우, do-while문이 좋다.
3) 조건의 참, 거짓에 따라 반복문이 수행하는 경우, while문이 좋다.


4) continue문
: 반복문 안에서 continue문을 만나면 이후의 문장은 수행하지 않고 for문의 처음으로 돌아가 증감식을 수행한다.

-------------------------------------------------------------------------------
package chap4;

public class ContinueExample {
	public static void main(String[] args) {
		int total = 0;
		int num;
		
		for(num = 1; num <= 100; num++) {	//100까지 반복
			if(num % 2 == 0)				//num 값이 짝수인 경우
				continue;					//이후 수행을 생략하고 num++ 수행
			total += num;					//num 값이 홀수인 경우에만 수행
		}
		
		System.out.println("1부터 100까지의 홀수의 합은 "+ total + "입니다.");
	}
}
-------------------------------------------------------------------------------
1부터 100까지의 홀수의 합은 2500입니다.
-------------------------------------------------------------------------------
=> if문이 true일 경우 continue문을 실행하여 다시 증감식을 진행한다. false일 경우, total += num으로 넘어간다.


5)break문
: 반복문에서도 switch-case문처럼  break문을 실행하면 빠져나오게 된다.
-------------------------------------------------------------------------------
package chap4;

public class BreakExample1 {
	public static void main(String[] args) {
		int sum = 0;
		int num = 0;
		
		for(num = 0; sum < 100; num++ ) {
			sum += num;
			if(sum >= 100)		//sum이 100보다 크거나 같을 때(종료 조건)
			break;				//반복문 중단
		}
		System.out.println("num : " + num);
		System.out.println("sum : " + sum);
	}
}
-------------------------------------------------------------------------------
num : 14
sum : 105
-------------------------------------------------------------------------------

** break문의 위치
: break문을 감싸고 있는 부분만 빠져나오게 된다.

-------------------------------------------------------------------------------
while(조건식1) {
	while(조건식2) {
	   if(조건식)		//조건에 해당하는 경우
	   break;		//내부 반복문만 빠져나옴
}
-------------------------------------------------------------------------------
=> 내부 반복문을 break문으로 인해 빠져나오고 외부 반복문은 진행된다고 생각하면 된다.


*** continue문과 break문의 차이
: continue문 = 반복문을 계속 수행하지만 특정 조건에서 수행문을 생략하는 경우에 사용
: break문 = 반복문을 더 이상 수행하지 않고 빠져나올 경우에 사용

-------------------------------------------------------------------------------
package chap4;

public class BreakExample2 {
	public static void main(String[] args) {
		int sum = 0;
		int num;
		
		for(num = 1; ; num++) {
			sum += num;
			if(sum >= 500)
			  break;
		}
		System.out.println(num);
		System.out.println(sum);
	}
}
-------------------------------------------------------------------------------
32
528
-------------------------------------------------------------------------------
