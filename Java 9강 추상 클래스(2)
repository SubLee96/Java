Java Programming

9) 추상 클래스(2)

9-3) 템플릿 메서드 응용하기
: 예제 만들어보기

# 클래스 기능과 관계
: 무조건 반사로 코딩하는 방법보다 주어진 문제를 어떤 식으로 해결할 것인지를 생각해보고 천천히 생각해서 
  손으로 클래스 다이어그램을 간략하게 그려 보는 것이 객체 지향 방식으로 문제를 해결하는 좋은 습괍이다!!!
=> "분석, 설계 과정"

의사 코드(pseudo code)를 생성하여 대략적인 모양을 구축한다.
-------------------------------------------------------------------------------
if(level == beginner)
	//beginner 기능 구현
else if(level == advanced)
	//advanced 기능 구현
else if(level == super)
	//super 기능 구현
-------------------------------------------------------------------------------

# 클래스 설계하기
: 각 레벨마다 공통 기능과 개별 기능이 있으므로 게벨 클래스를 상속 관계로 표현한다.
pg.298 확인하기!

: Player 클래스는 PlayerLevel을 맴버 변수로 갖는다.
  PlayerLevel 클래스는 추상 클래스로 모든 레벨에서 공통으로 수행하는 기능을 구현한다.
							   각 레벨마다 달라지는 기능은 추상 메서도로 만들어준다.

Player 클래스
-------------------------------------------------------------------------------
package gamLevel;

public class Player {
	
	//Player가 가지는 level 변수 선언
	private PlayerLevel level;
	
	//디폴트 생성자, 처음 생성되면 BeginnerLevel로 시작하며 레벨 메시지 출력
	public Player() {
		level = new BeginnerLevel();
		level.showLevelMessage();
	}
	
	public PlayerLevel getLevel() {
		return level;
	}
	
	//레벨 변경 메서드. 현재 자신의 level을 매개변수로 받은 level로 변경하고 레벨 메시지 출력
	public void upgradeLevel(PlayerLevel level) { //매개변수 자료형은 모든 레벨로 변환 가능한 PlayerLevel
		this.level = level;
		level.showLevelMessage();
	}
	
	//PlayerLevel의 템플릿 메서드 go()호출
	public void play(int count) {
		level.go(count);
	}
}
-------------------------------------------------------------------------------

PlayerLevel 클래스
-------------------------------------------------------------------------------
package gamLevel;

public abstract class PlayerLevel {
	public abstract void run();
	public abstract void jump();
	public abstract void turn();
	public abstract void showLevelMessage();
	
	final public void go(int count) {
		run();
		for(int i = 0; i < count; i++) {
			jump();
		}
		turn();
	}
}
-------------------------------------------------------------------------------
: Player go() 호출하면 run(), jump(), turn() 메서드가 순서대로 호출될 것이다. 
  이 코드는 모든 레벨에서 동일하고 변하면 안 되는 것이므로 final예약어를 사용한다.

= 초보자 레벨 클래스
: 천천히 달리는 기능만을 수행한다.
BeginnerLevel
-------------------------------------------------------------------------------
package gamLevel;

public class BeginnerLevel extends PlayerLevel {
	@Override
	public void run() {
		System.out.println("천천히 달립니다.");
	}
	
	@Override
	public void jump() {
		System.out.println("JUMP할 줄 모르지롱.");
	}
	
	@Override
	public void turn() {
		System.out.println("TURN할 줄 모르지롱.");
	}
	
	@Override
	public void showLevelMessage() {
		System.out.println("***** 초보자 레벨입니다. *****");
	}
}
-------------------------------------------------------------------------------

= 중급자 레벨 클래스
: 빠르게 달릴 수 있으며, 높이 점프할 수 있는 기능을 수행한다.
AdvancedLevel
-------------------------------------------------------------------------------
package gamLevel;

public class AdvancedLevel extends PlayerLevel {
	@Override
	public void run() {
		System.out.println("빨리 달립니다.");
	}
	
	@Override
	public void jump() {
		System.out.println("높이 JUMP합니다.");
	}
	
	@Override
	public void turn() {
		System.out.println("TURN할 줄 모르지롱.");
	}
	
	@Override
	public void showLevelMessage() {
		System.out.println("***** 중급자 레벨입니다. *****");
	}
}
-------------------------------------------------------------------------------

= 고급자 레벨 클래스
: 엄청 빨리 달릴 수 있으며, 높이 점프할 수 있으며, 한 바퀴 턴하는 기술도 갖추고 있다.
SuperLevel
-------------------------------------------------------------------------------
package gamLevel;

public class SuperLevel extends PlayerLevel {
	@Override
	public void run() {
		System.out.println("엄청 빨리 달립니다.");
	}
	
	@Override
	public void jump() {
		System.out.println("아주 높이 JUMP합니다.");
	}
	
	@Override
	public void turn() {
		System.out.println("한 바퀴 돕니다.");
	}
	
	@Override
	public void showLevelMessage() {
		System.out.println("***** 고급자 레벨입니다. *****");
	}
}
-------------------------------------------------------------------------------

테스트 프로그램 실행하기
-------------------------------------------------------------------------------
package gamLevel;

public class MainBoard {
	public static void main(String[] args) {
		
		//디폴트 Player를 BeginnerLevel로 잡았다.
		Player player = new Player();
		player.play(1);
		
		AdvancedLevel aLevel = new AdvancedLevel();
		player.upgradeLevel(aLevel);
		player.play(2);
		
		SuperLevel sLevel = new SuperLevel();
		player.upgradeLevel(sLevel);
		player.play(3);
	}
}
-------------------------------------------------------------------------------
***** 초보자 레벨입니다. *****
천천히 달립니다.
JUMP할 줄 모르지롱.
TURN할 줄 모르지롱.
***** 중급자 레벨입니다. *****
빨리 달립니다.
높이 JUMP합니다.
높이 JUMP합니다.
TURN할 줄 모르지롱.
***** 고급자 레벨입니다. *****
엄청 빨리 달립니다.
아주 높이 JUMP합니다.
아주 높이 JUMP합니다.
아주 높이 JUMP합니다.
한 바퀴 돕니다.
-------------------------------------------------------------------------------

# 추상 클래스와 다형성
=====================================================================================
: 상위 클래스인 추상 클래스는 하위에 구현된 여러 클래스를 하나의 자료형(상위 클래스 자로형)으로 선언하거나 대입할
  수 있다. 추상 클래스에 선언된 메서드를 호출하면 가상 메서드에 의해 각 클래스에 구현된 기능이 호출된다.
=> 즉, 하나의 코드가 다양한 자료형을 대상으로 동작하는 다형성을 활용할 수 있다!!!
=====================================================================================


9-4) final예약어 
: final : 마지막으로 정한 것이니 더 이상 수정할 수 없다는 의미를 가진다.
=================================================
사용 위치		설명
변수			final 변수는 상수를 의미한다.
메서드		final 메서드는 하위 클래스에서 정의할 수 없다.
클래스		final 클래스는 상속할 수 없다.
=================================================

# 상수를 의미하는 final변수
-------------------------------------------------------------------------------
package finalex;

public class Constant {
	int num = 10;
	final int NUM = 100; //상수 선언
	
	public static void main(String[] args) {
		Constant cons = new Constant();
		cons.num = 50;
		cons.NUM = 200;	//상수에 값을 대입하여 오류 발생
		
		System.out.println(cons.num);
		System.out.println(cons.NUM);
	}
}
-------------------------------------------------------------------------------
: 상수에 값을 대입하여 오류가 발생했다. 


= 여러 자바 파일에서 공유하는 상수 값 정의하기
: 하나의 자바 파일에서만 사용하는 상수 값은 해당 파일 안에서 정의해서 사용할 수 있다.
> 반면, 여러 파일에서 똑같이 공유해야 하는 상수 값도 있을 수 있다.

예) 최솟값(MIN)과 최댓값(MAX), 전체에서 공통으로 적용하는 과목 코드 값 등이 있다.
-> 이런 값을 파일마다 선언한다면 코드가 중복될 뿐만 아니라 값이 변하거나 추가될 때 그 값을 사용하는 파일을
   모두 수정해야 한다.
> 여러 파일에서 공유해야 하는 상수 값은 한 파일에 모아 public static final로 선언하여 사용하면 좋다!!!   

여러 파일에서 공유하는 상수(Define.java)
-------------------------------------------------------------------------------
package finalex;

public class Define {
	public static final int MIN = 1;
	public static final int MAX = 99999;
	public static final int ENG = 1001;
	public static final int MATH = 2001;
	public static final double PI = 3.14;
	public static final String GOOD_MORNING = "Good Morning!";
}
-------------------------------------------------------------------------------
: final로 선언했기 때문에 이들 값은 외부에서도 사용할 수 있다.
: static으로 선언했기 때문에 인스턴스를 생성하는 것과 관계없이 클래스 이름으로 참조할 수 있다.

-------------------------------------------------------------------------------
package finalex;

public class UsingDefine {
	public static void main(String[] args) {
		System.out.println(Define.GOOD_MORNING); //static으로 선언했기에 인스턴스를 생성하지 않고 클래스 이름으로 창조 가능
		System.out.println("최솟값은 " + Define.MIN + "입니다.");
		System.out.println("최댓값은 " + Define.MAX + "입니다.");
		System.out.println("수학 과목 코드 값은 " + Define.MATH + "입니다.");
		System.out.println("영어 과목 코드 값은 " + Define.ENG + "입니다.");
	}
}
-------------------------------------------------------------------------------
Good Morning!
최솟값은 1입니다.
최댓값은 99999입니다.
수학 과목 코드 값은 2001입니다.
영어 과목 코드 값은 1001입니다.
-------------------------------------------------------------------------------

# 상속할 수 없는 final 클래스
: 클래스르 final로 선언하면 상속할 수 없다.
> 상속하면 변수나 메서드를 재정의할 수 있는데, 그러면 원래 클래스가 가지고 있는 기능에 오류가 생긴다.
  (보안을 위해서 클래스를 final로 선언한다.)

# 프로그램을 잘 구현하는 또 다른 방법
: 프로그램을 잘 짜는 방법??

Player클래스
-------------------------------------------------------------------------------
package test;

public class MainBoard {
	public static void main(String[] args) {
		
		Player player = new Player();	//오류 발생
		player.player(1);
		
		AdvancedLevel aLevel = new AdvancedLevel(); //오류 발생
		player.upgradeLevel(aLevel);
		player.player(2);
		
		SuperLevel sLevel = new SuperLevel(); //오류 발생
		player.upgradeLevel(sLevel);
		player.player(3);
	}
}
-------------------------------------------------------------------------------
: 수많은 오류가 발생한다.

이를 다시 원래 코드로 형성하는 방법을 익히면 실력이 향상된다.
: 먼저 개발하는 개발 방법론을 "테스트 주도 개발"(Test Driven Development; TDD)라 칭한다.
=> 테스트 코드를 만들 수 있다는 의미는 이미 구현 코드가 머릿속에 있다는 의미이다.

======================================================================
이미 한 번 따라 한 코드이므로 거꾸로 진행하면서 리뷰도 해보고 자기만의 코드로 만들어 보자!!!
======================================================================
