Java Programming

8) 상속과 다형성(2)

8-4) 다형성
: 다형성(polymorphism)
  : 하나의 코드가 여러 자료형으로 구현되어 실행되는 것
	> 코드에서 여러 실행 결과가 나오는 것

: 3개의 클래스가 Animal 클래스를 상속받는 경우를 생각한다.
> Animal 클래스에 메서드를 하나 정의하고 상속받은 클래스에서 재정의한다.
-------------------------------------------------------------------------------
package polymorphism;

class Animal {
	public void move() {
		System.out.println("동물이 움직입니다.");
	}
}

class Human extends Animal {
	public void move() {
		System.out.println("사람이 두 발로 걷습니다.");
	}
}

class Tiger extends Animal {
	public void move() {
		System.out.println("호랑이가 네 발로 뜁니다.");
	}
}

class Eagle extends Animal {
	public void move() {
		System.out.println("독수리가 하늘을 납니다.");
	}
}

public class AnimalTest1 {
	public static void main(String[] args) {
		AnimalTest1 aTest = new AnimalTest1();
		aTest.moveAnimal(new Human());
		aTest.moveAnimal(new Tiger());
		aTest.moveAnimal(new Eagle());
	}
	
	public void moveAnimal(Animal animal) {	//매개변수의 자료형이 상위 클래스
		animal.move();						//재정의된 메서드가 호출됨
	}
}
-------------------------------------------------------------------------------
사람이 두 발로 걷습니다.
호랑이가 네 발로 뜁니다.
독수리가 하늘을 납니다.
-------------------------------------------------------------------------------
: AnimalTest 클래스에 moveAnimal() 메서드를 만들었다.
  > 메서드는 어떤 인스턴스가 매개변수로 넘어와도 모두 Animal형으로 변환된다.
  > Animal에서 상속받은 클래스가 매개변수로 넘어오면 모두 Animal형으로 변환되므로 animal.move()메서드를 호출한다.
  => animal.move()코드는 변함없지만 어떤 매개 변수가 넘어왔느냐에 따라 출력문이 달라진다.


# 다형성의 장점
: 새로운 동물도 Animal 클래스를 상속받아 구현하면 모든 클래스를 Animal 자료형 하나로 쉽게 관리할 수 있다.
  => "프로그램의 확장성"
  > 만약 자료형에 따라 코드를 다르게 구현한다면 코드는 훨씬 복잡해진다.
  (상위 클래스에서 공통 부분의 메서드를 제공하고, 하위 클래스에서는 그에 기반한 추가 요소를 덧붙여 구현하면
   코드 양도 줄어들고 유지보수도 편리하다.)

= 다형성을 활용해 VIP 고객 클래스 완성하기

Customer.java
-------------------------------------------------------------------------------
package polymorphism;

public class Customer {
	protected int customerID;
	protected String customerName;
	protected String customerGrade;
	int bonusPoint;
	double bonusRatio;
	
	public Customer() {
		initCustomer();
	}
	
	public Customer(int customerID, String customerName) {
		this.customerID = customerID;
		this.customerName = customerName;
		initCustomer();
	}
	
	//맴버 변수의 초기화 부분
	private void initCustomer() {
		customerGrade = "SILVER";
		bonusRatio = 0.01;
	}
	
	public int calcPrice(int price) {
		bonusPoint += price * bonusRatio;
		return price;
	}
	
	public String showCustomerInfo() {
		return customerName + "님의 등급은 " + customerGrade + "이며, 보너스 포인트는 "
				+ bonusPoint + "입니다.";
	}
}
-------------------------------------------------------------------------------

VIPCustomer.java
-------------------------------------------------------------------------------
package polymorphism;

public class VIPCustomer extends Customer {
	private int agentID;
	double saleRatio;

	public VIPCustomer(int customerID, String customerName, int agentID) {
		super(customerID, customerName);
		customerGrade = "VIP";
		bonusRatio = 0.05;
		saleRatio = 0.1;
		this.agentID = agentID;
	}
	
	//지불 가격 메서드 재정의
	public int calcPrice(int price) {
		bonusPoint += price * bonusRatio;
		return price - (int)(price * saleRatio);
	}
	
	public String showCustomerInfo() {
		return super.showCustomerInfo() + "담당 상담원 번호는 " + agentID + "입니다.");
	}
	
	public int getAgentID()	{
		return agentID;
	}
}
-------------------------------------------------------------------------------

CustomerTest.java
-------------------------------------------------------------------------------
package polymorphism;

public class CustomerTest {
	public static void main(String[] args) {
		Customer customerLee = new Customer();
		customerLee.setCustomerID(10010);
		customerLee.setCustomerName("이윤섭");
		customerLee.bonusPoint = 1000;
		
		System.out.println(customerLee.showCustomerInfo());
		
		VIPCustomer customerJ = new VIPCustomer(10020, "Lebron James", 12345);
		customerJ.bonusPoint = 1000;
		
		System.out.println(customerJ.showCustomerInfo());
		System.out.println("====== 할인율과 보너스 포인트 계산 ======");
		
		int price = 10000;
		int leePrice = customerLee.calcPrice(price);
		int jPrice = customerJ.calcPrice(price);
		
		System.out.println(customerLee.getCustomerName() + "님이" + leePrice + "원 지불하셨습니다.");
		System.out.println(customerLee.showCustomerInfo());
		System.out.println(customerJ.getCustomerName() + "님이" + jPrice + "원 지불하셨습니다.");
		System.out.println(customerJ.showCustomerInfo());
	}
}
-------------------------------------------------------------------------------
이윤섭님의 등급은 SILVER이며, 보너스 포인트는 1000입니다.
Lebron James님의 등급은 VIP이며, 보너스 포인트는 1000입니다.담당 상담원 번호는 12345입니다.
====== 할인율과 보너스 포인트 계산 ======
이윤섭님이10000원 지불하셨습니다.
이윤섭님의 등급은 SILVER이며, 보너스 포인트는 1100입니다.
Lebron James님이9000원 지불하셨습니다.
Lebron James님의 등급은 VIP이며, 보너스 포인트는 1500입니다.담당 상담원 번호는 12345입니다.
-------------------------------------------------------------------------------
: 상속 관계에 있는 상위 클래스와 하위 클래스는 같은 상위 클래스 자료형으로 선언되어 생성할 수 있지만,
  재정의된 메서드는 각각 호출될 뿐만 아니라 이름이 같은 메서드가 서로 다른 역할을 구현하고 있다.


8-5) 다형성 활용하기
: 배열을 함께 사용하면 여러 하위 클래스 자료형을 상위 클래스 자요형으로 한꺼번에 관리할 수 있다.

# 일반 고객과 VIP 고객의 중간 등급 만들기
: 예제 시나리오
> 고객이 늘어 VIP 고객만큼 물건을 많이 구매하지는 않지만, 그래도 단골인 분들에게 혜택을 주고 싶습니다.
  그래서 GOLD 고객 등급을 하나 추가합니다. GOLD 고객의 혜택은 다음과 같다.
  1) 제품을 살 때는 항상 10% 할인해준다.
  2) 보너스 포인트를 2% 적립해준다.
  3) 담당 전문 상담원은 없다.

GOLDCustomer.java(새로운 고객 등급 추가하기)
-------------------------------------------------------------------------------
package witharraylist;

public class GoldCustomer extends Customer{

	double saleRatio;
	
	public GoldCustomer(int customerID, String customerName){
		super(customerID, customerName);
	
		customerGrade = "GOLD";
		bonusRatio = 0.02;
		saleRatio = 0.1;
	
	}
	
	public int calcPrice(int price){
		bonusPoint += price * bonusRatio;
		return price - (int)(price * saleRatio);
	}
}
-------------------------------------------------------------------------------


# 배열로 고객 5명 구현하기
: 예제 시나리오
> 이 회사의 고객은 현재 5명입니다. 5명 중 VIP 1명, GOLD 2명, SILVER 2명입니다. 이 고객들이 각각
  10,000원짜리 상품을 구매했을 때의 결과를 출력합니다.

-------------------------------------------------------------------------------
package witharraylist;

import java.util.ArrayList;

import polymorphism.Customer;

public class CustomerTest {
	public static void main(String[] args) {
		ArrayList<Customer> customerList = new ArrayList<Customer>();
		
		Customer customerLee = new Customer(10010, "이순신");
		Customer customerShin = new Customer(10020, "신사임당");
		Customer customerHong = new GoldCustomer(10030, "홍길동");
		Customer customerYoul = new GoldCustomer(10040, "이율곡");
		Customer customerKim = new VIPCustomer(10050, "김유신", 12345);
		
		customerList.add(customerLee);
		customerList.add(customerShin);
		customerList.add(customerHong);
		customerList.add(customerYoul);
		customerList.add(customerKim);
		
		System.out.println("====== 고객 정보 출력 ======");
		for(Customer customer : customerList) {
			System.out.println(customer.showCustomerInfo());
		}
		
		System.out.println("====== 할인율과 보너스 포인트 계산 ======");
		int price = 10000;
		for(Customer customer : customerList) {
			int cost = customer.calcPrice(price);
			System.out.println(customer.getCustomerName() + " 님이 " + cost
					+ "원 지불하셨습니다.");
			System.out.println(customer.getCustomerName() + " 님의 현재 보너스 포인트는 "
					+ customer.bonusPoint + "점입니다.");
		}
	}
}
-------------------------------------------------------------------------------
====== 고객 정보 출력 =======
이순신 님의 등급은 SILVER이며, 보너스 포인트는 0입니다.
신사임당 님의 등급은 SILVER이며, 보너스 포인트는 0입니다.
홍길동 님의 등급은 GOLD이며, 보너스 포인트는 0입니다.
이율곡 님의 등급은 GOLD이며, 보너스 포인트는 0입니다.
김유신 님의 등급은 VIP이며, 보너스 포인트는 0입니다. 담당 상담원 번호는 12345입니다
====== 할인율과 보너스 포인트 계산 =======
이순신 님이 10000원 지불하셨습니다.
이순신 님의 현재 보너스 포인트는 100점입니다.
신사임당 님이 10000원 지불하셨습니다.
신사임당 님의 현재 보너스 포인트는 100점입니다.
홍길동 님이 9000원 지불하셨습니다.
홍길동 님의 현재 보너스 포인트는 200점입니다.
이율곡 님이 9000원 지불하셨습니다.
이율곡 님의 현재 보너스 포인트는 200점입니다.
김유신 님이 9000원 지불하셨습니다.
김유신 님의 현재 보너스 포인트는 500점입니다.
-------------------------------------------------------------------------------

: 상속을 항상 사용하는 것이 좋을까?
답) 아니다!!!
> IS-A관계(is a relationship; inheritance) : 일반적인 개념과 구체적인 개념의 관계
  (일반 클래스를 점차 구체화할 때 상속 사용!)
  이 상황에서 가장 효율적이다!!!

> HAS-A 관계(has a relationship; inheritance) : 한 클래스가 다른 클래스를 소유한 관계
  (Subject와 Student의 관계)
  
===================================================================
다중 상속 가능한가?
답) 그렇다. 그러나, java에서는 지원하지 않는다. 
이유) 다이아몬드 문제 : 다중 상속을 받는 하위 클래스는 어떤 메서드를 받을지가 애매해진다.
> C++은 문법적으로 다중 상속을 지원할 수 있게 만들어져있다.
===================================================================


8-6) 다운 캐스팅과 instanceof
: 다운 캐스팅(down casting) 
  : 상위 클래스로 형 변환되었던 하위 클래스를 다시 원래 자료형으로 형 변환하는 것

# instanceof
: 다운캐스팅을 하면 상위 클래스로 형 변환된 인스턴스의 원래 자료형을 확인해야 변환할 때 오류를 막을 수 있다.
  >이를 확인하는 예약어는 instanceof이다.

-------------------------------------------------------------------------------
package polymorphism;

import java.util.ArrayList;

class Animal {
	public void move() {
		System.out.println("동물이 움직입니다.");
	}
}

class Human extends Animal {
	public void move() {
		System.out.println("사람이 두 발로 걷습니다.");
	}
	
	public void readBook() {
		System.out.println("사람이 책을 읽습니다.");
	}
}

class Tiger extends Animal {
	public void move() {
		System.out.println("호랑이가 네 발로 뜁니다.");
	}
	
	public void hunting() {
		System.out.println("호랑이가 네 발로 사냥합니다.");
	}
}

class Eagle extends Animal {
	public void move() {
		System.out.println("독수리가 하늘을 납니다.");
	}
	
	public void flying() {
		System.out.println("독수리가 날개를 쭉 펴고 멀리 날아갑니다.");
	}
}

public class AnimalTest2 {
	
	ArrayList<Animal> aniList = new ArrayList<Animal>();

	public static void main(String[] args) {
		AnimalTest2 aTest = new AnimalTest2();
		aTest.addAnimal();
		System.out.println("원래 타입으로 다운 캐스팅 ");
		aTest.testCasting();

	}
	
	public void addAnimal()
	{
		aniList.add(new Human());    //ArrayList에 추가되면서 Animal형으로 형 변환
		aniList.add(new Tiger());
		aniList.add(new Eagle());
		
		for(Animal ani : aniList){     // 배열의 요소들을 Animal형으로 꺼내서 move() 호출하면
			ani.move();                // 오버라이딩된 함수가 호출 됨
		}
	}

	
	public void testCasting()
	{
		for(int i=0; i<aniList.size(); i++){  //모든 배열 항목들을 하나씩 돌면서
			
			Animal ani = aniList.get(i);      // 일단 Shape 타입으로 가져옴
			if(ani instanceof Human){         //Human이면
				Human h = (Human)ani;         //Human형으로 다운 캐스팅
				h.readBook();
			}
			else if(ani instanceof Tiger){  
				Tiger t = (Tiger)ani;
				t.hunting();
			}
			else if(ani instanceof Eagle){
				Eagle e = (Eagle)ani;
				e.flying();
			}
			else{
				System.out.println("지원되지 않는 타입입니다.");
			}
		}
	}
}
-------------------------------------------------------------------------------
사람이 두 발로 걷습니다.
호랑이가 네 발로 뜁니다.
독수리가 하늘을 납니다.
원래 타입으로 다운 캐스팅 
사람이 책을 읽습니다.
호랑이가 네 발로 사냥합니다.
독수리가 날개를 쭉 펴고 멀리 날아갑니다.
-------------------------------------------------------------------------------
: Animal형인 상태에서는 Human 클래스가 제공하는 readBook(), hunting(), flying()을 호출하기 위해서는
  다시 원래 자료형으로 다운 캐스팅되어야 한다.
