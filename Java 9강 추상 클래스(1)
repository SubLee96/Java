Java Programming

9) 추상 클래스(1)
> 완전하지 않은 클래스이다.
> 프레임 워크에서 사용하고 있는 구현 방식이다.

9-1) 추상 클래스
: 추상 클래스(abstract) : 구체적이지 않은 클래스
> 추상 클래스는 항상 '추상 메서드(abstract method)'를 포함한다.
> 추상 메서드는 구현 코드가 없다.(함수 몸체가 없다.)
-------------------------------------------------------------------------------
int add(int x, int y) {
	return x + y;
)
-------------------------------------------------------------------------------
: { }안에 있는 내용이 함수의 몸체가 된다.
: { }로 감싼 부분을 함수의 구현부(implementation)이라 한다.
=> 이 부분이 없는 함수를 '추상 함수'라고 한다.

= abtract예약어를 사용한다. ( { } 대신 ;를 사용한다.)
> 선언만 하는 메서드이다.
-------------------------------------------------------------------------------
abstract int add(int x, int y);
abstract int add(int x, int y) { }
-------------------------------------------------------------------------------


# 메서드 선언의 의미
: 프로그램을 열심히 구현하기 위해 로직을 짜는 행위도 중요하지만 "어떻게 구현할지 결정하는 부분"도 중요하다.
> 개발 설계라 부른다.

예) int add(int num1, int num2);
: 선언부(declaration)만 봐도 이 메서드가 num1과 num2를 더할 거라는 사실을 알 수 있다.


# 추상 클래스 구현하기
-------------------------------------------------------------------------------
package abstractex;

public class Computer {
	public void display();	//오류 발생
	public void typing();	//오류 발생
	public void turnOn() {
		System.out.println("전원을 킵니다.");
	}
	public void turnOff() {
		System.out.println("전원을 끕니다.");
	}
}
-------------------------------------------------------------------------------
: 오류가 발생하는 부분을 두 가지 방법으로 해결할 수 있다.
1. 몸체 부분을 작성하는 방법
2. 메서드를 추상 메서드로 바꾸는 방법

-------------------------------------------------------------------------------
package abstractex;

public class Computer {
	public abstract void display();
	public abstract void typing();
	...
}
-------------------------------------------------------------------------------
: abstract예약어를 추가해도 오류가 발생한다.
> 추상 메서드가 속한 클래스를 추상 클래스로 선언하지 않았기 때문이다.(해결 방법 두 가지)
1. 메서드에서 abstract 예약어를 제거하는 방법
2. Computer 클래스를 추상 클래스로 만드는 방법

= 2번 방법을 선택하여 문제를 해결했다.
-------------------------------------------------------------------------------
package abstractex;

public abstract class Computer {
	public abstract void display();
	public abstract void typing();
	public void turnOn() {
		System.out.println("전원을 킵니다.");
	}
	public void turnOff() {
		System.out.println("전원을 끕니다.");
	}
}
-------------------------------------------------------------------------------
: 이 메서드의 의미 
> 'Computer를 상속받는 클래스 중 turnOn()과 turnOff() 구현 코드는 공통이다. 하지만 display()와
typing()은 하위 클래스에 따라 구현이 달라질 수 있다. 그래서 Computer에서는 구현하지 않고, 이 두 메서드
구현을 상속받는 클래스에 위임한다.'
라는 의미를 띠고 있다.

= 상속 받은 DeskTop도 추상 클래스로 속하게 된다.
-------------------------------------------------------------------------------
package abstractex;

public class DeskTop extends Computer {

	@Override
	public void display() {
		System.out.println("DeskTop display()");
	}

	@Override
	public void typing() {
		System.out.println("Desktop typing()");
	}
	
}
-------------------------------------------------------------------------------
: display() 하나만을 구현하고 있는 상태이다.

-------------------------------------------------------------------------------
package abstractex;

public class MyNoteBook extends NoteBook {
	@Override
	public void typing() {
		System.out.println("MyNoteBook typing()");
	}

}
-------------------------------------------------------------------------------
: MyNoteBook은 모든 추상 메서드가 구현된 클래스이므로 abstract예약어를 사용하지 않는다.


# 추상 클래스를 만드는 이유
-------------------------------------------------------------------------------
package abstractex;

public class ComputerTest {
	public static void main(String[] args) {
		Computer c1 = new Computer();
		Computer c2 = new DeskTop();
		Computer c3 = new NoteBook();
		Computer c4 = new MyNoteBook();
	}
}
-------------------------------------------------------------------------------
: Computer 클래스와 NoteBook 클래스에서는 오류가 발생한다.

=> 추상 클래스는 인스턴스로 생성할 수 없다.
  : 구현된 코드가 없기 때문에 수행할 수 있는 내용이 없다.
  : 단, 형 변환은 가능하다.
  
  
# 추상 클래스에서 구현하는 메서드
: 추상 클래스는 상속을 하기 위해 만든 클래스이다.
> ** 추상 클래스에서 구현하는 메서드는 하위 클래스에서도 사용할 목적(하위 클래스에서도 구현 내용을 고유할 메서드)
= 구현된 메서드 : 하위 클래스에서 공통으로 사용할 구현 코드, 하위 클래스에서 재정의할 수도 있다.
= 추상 메서드 : 하위 클래스가 어떤 클래스냐에 따라 구현 코드가 달라짐

=========================================================================
Computer 클래스를 보면, turnOn()과 turnOff()의 구현은 하위 클래스에서 공유할 수 있으나,
display()와 typing()의 구현 내용은 NoteBook인지 DeskTop인지에 따라 달라진다.
=========================================================================


9-2) 템플릿 메서드

# 추상 클래스와 템플릿 메서드
: '템플릿(template)' : 틀이 있는 메서드 (디자인 패턴의 한 방식이다.)
-------------------------------------------------------------------------------
package template;

public abstract class Car {
	public abstract void drive();
	public abstract void stop();
	
	public void startCar() {
		System.out.println("시동을 켭니다.");
	}
	
	public void turnOff() {
		System.out.println("시동을 끕니다.");
	}
	
	//템플릿 메서드
	final public void run( ) {
		startCar();
		drive();
		stop();
		turnOff();
	}
}
-------------------------------------------------------------------------------
: Car 클래스에는 drive()와 stop()이라는 추상 메서드와 startCar()와 turnOff()와 run()이라는 
  구현된 메서드를 가지고 있다.
1. Car는 startCar와 turnOff라는 기능을 기본적으로 수행한다.
2. drive와 stop은 차족에 따라 다른 구동 방식을 보인다.
3. run은 시동을 켜고, 운전하고, 멈추고, 시동을 끄는 순서를 구현했다.

=> 자동차 종류에 따라서 구현 내용이 달라지는 부분은 추상 메서드로 만들고,
   공통으로 사용하는 메서드는 추상 클래스에 구현하여 상속받아 사용한다.

-------------------------------------------------------------------------------
package template;

public class AICar extends Car {

	@Override
	public void drive() {
		System.out.println("자율 주행합니다.");
		System.out.println("자동차가 알아서 방향을 전환합니다.");
	}
	
	@Override
	public void stop() {
		System.out.println("스스로 멈춥니다.");
	}

}
-------------------------------------------------------------------------------
: AICar 클래스는 Car 클래스를 상속받았고, drive()와 stop()이라는 추상 메서드를 구현했다.
> 즉, AICar는 자율 주행을 하고 방향도 알아서 바꾸고, 사람은 시동을 켜고 끄는 일만 수행한다.

-------------------------------------------------------------------------------
package template;

public class ManualCar extends Car {
	
	@Override
	public void drive() {
		System.out.println("사람이 운전합니다.");
		System.out.println("사람이 핸들을 조작합니다.");
	}
	
	@Override
	public void stop() {
		System.out.println("브레이크로 정지합니다.");
	}
}
-------------------------------------------------------------------------------
: Manual Car 클래스도 Car 클래스에게 상속을 받았다.

-------------------------------------------------------------------------------
package template;

public class CarTest {
	public static void main (String[] args) {
		System.out.println("=== 자율 주행하는 자동차 ===");
		Car myCar = new AICar();
		myCar.run();

	
		System.out.println("=== 사람이 운전하는 자동차 ===");
		Car hisCar = new ManualCar();
		hisCar.run();
	}
}
-------------------------------------------------------------------------------
=== 자율 주행하는 자동차 ===
시동을 켭니다.
자율 주행합니다.
자동차가 알아서 방향을 전환합니다.
스스로 멈춥니다.
시동을 끕니다.
=== 사람이 운전하는 자동차 ===
시동을 켭니다.
사람이 운전합니다.
사람이 핸들을 조작합니다.
브레이크로 정지합니다.
시동을 끕니다.
-------------------------------------------------------------------------------
: 이런 식으로 구동하게 된다.

# 템플릿 메서드의 역할
: 실행 순서(시나리오)를 정의한 메서드이므로 바뀔 수 없다.
: CarTest에 두 개의 인스턴스(myCar, hisCar)를 만들었다. 
  run()은 어느 차나 동일하게 작동된다.
=> 템플릿 메서드는 "메서드의 실행 순서나 시나리오를 정의하는 역할을 수행한다."
즉, 추상 메서드에 따라서 구동하는 방법은 달라질 수 있어도 전체적인 시나리오는 동일하는 의미이다.

그렇기에 final예약어를 사용하여 재정의되지 못하게 막고 있다.
=> 프레임워크에서 많이 사용하는 기술이다.


=========================================================================
추상 클래스는 하위 클래스에서도 사용할 수 있는 코드를 구현한다.
> 일반 메서드는 하위 클래스에서 재정의할 수 있다.
> 템플릿 메서드는 로직 흐름을 정의하는 역할을 수행한다.
> 이 흐름은 모든 하위 클래스가 공통으로 사용하고 코드를 변경하면 안되기에 final로 선언한다.
=========================================================================


나 혼자 코딩하기
: 와이퍼 기능을 추가한다.
1) Manual Car에서 wiper() 메서드를 호출하면 '사람이 빠르기를 조절합니다.'라고 출력하고,
2) AICar에서 wiper() 메서드를 호출하면 '비나 눈의 양에 따라 빠르기가 자동으로 조절됩니다.'라고 출력한다.
-------------------------------------------------------------------------------
package template;

public abstract class Car {
	public abstract void drive();
	public abstract void stop();
	public abstract void wiper();
	
	public void startCar() {
		System.out.println("시동을 켭니다.");
	}
	
	public void turnOff() {
		System.out.println("시동을 끕니다.");
	}
	
	//템플릿 메서드
	final public void run( ) {
		startCar();
		drive();
		wiper();	//빠르기를 조절하는 추상 클래스 추가
		stop();
		turnOff();
	}
}
-------------------------------------------------------------------------------
package template;

public class AICar extends Car {

	@Override
	public void drive() {
		System.out.println("자율 주행합니다.");
		System.out.println("자동차가 스스로 방향을 전환합니다.");
	}
	
	@Override
	public void stop() {
		System.out.println("스스로 멈춥니다.");
	}
	
	@Override
	public void wiper() {
		System.out.println("비나 눈의 양에 따라 빠르기가 자동으로 조절됩니다.");
	}
}
-------------------------------------------------------------------------------
package template;

public class ManualCar extends Car {
	
	@Override
	public void drive() {
		System.out.println("사람이 운전합니다.");
		System.out.println("사람이 핸들을 조작합니다.");
	}
	
	@Override
	public void stop() {
		System.out.println("브레이크로 정지합니다.");
	}
	
	@Override
	public void wiper() {
		System.out.println("사람이 빠르기를 조절합니다.");
	}
}
-------------------------------------------------------------------------------
=== 자율 주행하는 자동차 ===
시동을 켭니다.
자율 주행합니다.
자동차가 스스로 방향을 전환합니다.
비나 눈의 양에 따라 빠르기가 자동으로 조절됩니다.
스스로 멈춥니다.
시동을 끕니다.
=== 사람이 운전하는 자동차 ===
시동을 켭니다.
사람이 운전합니다.
사람이 핸들을 조작합니다.
사람이 빠르기를 조절합니다.
브레이크로 정지합니다.
시동을 끕니다.
-------------------------------------------------------------------------------
