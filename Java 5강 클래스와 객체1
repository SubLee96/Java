Java Programming

5) 클래스와 객체1

5-1) 객체 지향 프로그래밍(Object-Oriented Programming; OOP)과 클래스
- 객체 : 의사나 행위가 미치는 대상
- 객체 지향 프로그래밍 : 어떤 대상(객체)을 가지고 프로그래밍

1) 생활 속에서 객체 찾아보기
- 절차 지향 프로그래밍 : 순서대로 일어나는 일을 시간순으로 프로그래밍하는 것 ex) C언어
예) 아침에 일어나서 학교가는 과정을 순서대로 한다면 '절차 지향 프로그래밍'이라 할 수 있다.

- 객체 지향 프로그래밍 : 객체를 정의하고 객체 간 협력을 프로그래밍하는 것 ex) Java
예) 대상이 되는 객체를 찾아보면 학생, 밥, 버스, 학교 등이 있다.
						학생이라는 객체가 버스라는 객체를 탄다. 
=> 객체를 먼저 정의하고 각 객체가 어떤 기능을 제공하고 객체 간 협력을 어떻게 구현할 것인지를 고민
(객체 정의, 어떤 기능 제공?, 어떻게 구현?)

2) 클래스
: 객체 지향 프로그램은 '클래스'를 기반으로 프로그래밍을 실시한다.
- 클래스 : 객체의 속성과 기능을 코드로 구현한 것.
(객체를 클래스로 구현하는 것 = 클래스를 정의한다.)

=> 객체를 코드로 구현하려면 우선, 클래스의 '이름'이 필요하다.
예) Student라는 객체의 일반적인 객체가 가지는 속성은 이름, 학번, 주소 등이 된다.
    클래스 속성은 '특성'이라 칭하고, 클래스 내부에 변수로 선언한다. 이를 '맴버 변수'라 한다.
	
-------------------------------------------------------------------------------
(접근 제어자) class 클래스 이름 {
	맴버 변수;
	메서드;
}
-------------------------------------------------------------------------------
package chap5;

	  //예약어  //클래스 이름
public class Student {
	int studentID;			//학번
	String studentName;		//이름	=> 맴버 변수
	int grade;				//학년
	String address;			//주소
}
-------------------------------------------------------------------------------
: 클래스를 만들 때는 예약어 class를 사용한다. 클래스의 이름은 Student라 칭한다. {}안에 클래스 내용을 구현한다.

-------------------------------------------------------------------------------
1분 복습
-------------------------------------------------------------------------------
public class Person {
	String name;
	int age;
	char gender;
}
-------------------------------------------------------------------------------

** 클래스 이름 짓는 규칙
: 클래스의 이름은 '대문자'로 시작한다.(대문자로 작성하는 것이 개발자들 사이의 규칙이다. = coding convention)


5-2) 클래스 살펴보기
= 클래스 속성을 구현하는 맴버 변수
: 클래스 내부에 선언하여 객체 속성을 나타내는 변수 : 맴버 변수(Member Variable), 속성(property), 특성(Attribute)
-------------------------------------------------------------------------------
package chap5;

	  //예약어  //클래스 이름
public class Student {
	int studentID;			//학번
	String studentName;		//이름	=> 맴버 변수
	int grade;				//학년
	String address;			//주소
}
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
package chap5;

public class Person {
	String name;		//이름
	int height;			//키
	double weight;		//몸무게
	char gender;		//성별
	boolean married;	//결혼 여부
}
-------------------------------------------------------------------------------

** 변수의 자료형
1. 기본 자료형(primitive data type)
: int형, double형
2. 참조 자료형(= 클래스형)
: String, Date 등은 이미 JDK에서 제공하는 것 
: Student, Person 등은 개발자가 직접 만든 클래스


1) 클래스 기능을 구현하는 메서드
- 메서드(method), 맴버 함수(Member function)
: 클래스 내부에서 맴버 변수를 사용하여 클래스 기능을 구현한 것

-------------------------------------------------------------------------------
package chap5;

	  //예약어  //클래스 이름
public class Student {
	int studentID;			//학번
	String studentName;		//이름	=> 맴버 변수
	int grade;				//학년
	String address;			//주소

	public void showStudentInfo( ) {											}
		System.out.println(studentName + ", " + address); //이름, 주소  출력		}   =>   메서드 추가
	}																			}
}
-------------------------------------------------------------------------------

2) 패키지란?
: 클래스 파일의 묶음 / 프로젝트 전체 소스 코드를 구성하는 '계층 구조'
=> 이 계층 구조를 잘 구성해야 소스 코드 관리와 유지보수가 편리하다.

** 클래스의 이름이 동일하다고 하더라도 다른 패키지에 있다면 다른 클래스인 것이다.


5-3) 메서드
: 함수의 한 종류

1. 함수란?
: 하나의 기능을 수행하는 일련의 코드

2. 함수의 입력과 반환
: 함수는 입력 값과 결과 값이 있다. 

-------------------------------------------------------------------------------
int add(int num1, int num2) {
	int result;
	result = num1 + num2;
	return result;
}
-------------------------------------------------------------------------------
: 함수 이름 = add
: 매개변수 = num1, num2  
: return = 반환하는 예약어


3. 함수 호출하고 값 반환하기
: 두 정수를 더한 후 두 결과 값을 돌려주는 함수 = 함수를 호출한다.

-------------------------------------------------------------------------------
package chap5;

public class FunctionTest {
	public static void main(String[] args) {
		int num1 = 10;
		int num2 = 20;
		
		int sum = add(num1, num2);	//add() 함수 호출
		System.out.println(num1 + " + " + num2 + " = " + sum + "입니다.");
	}
	
	public static int add(int n1, int n2) {
		int result = n1 + n2;
		return result;						//add() 함수에 대한 정의 
	}
}
-------------------------------------------------------------------------------
=> 이런 식으로 add() 함수를 정의해주고, 위에 수행할 문장을 작성해주면 완료!

** 매개변수의 이름과 함수를 구현할 때 사용하는 매개변수의 이름은 달라도 된다. 

4. 함수 호출과 스택 메모리
: 함수를 호출하면 그 함수만을 위한 메모리 공간이 할당되는데, 이 메모리 공간을 스택(stack)이라 부른다.

- 지역 변수 : 함수 내부에서만 사용하는 변수 (스택 메모리에 생성된다)

5. 함수의 장점
1) 함수를 사용하면 기능을 나누어 코드를 효율적으로 구현할 수 있다.
	굳이 너무 긴 코드를 main()에 사용하지 않고, 다른 곳에 분업시킬 수 있다.
2) 기능별로 함수를 구현해 놓으면 같은 기능을 매번 코드로 만들지 않고 그 기능의 함수를 호출하면 되니까 편리하다.
3) 프로그램을 실행할 때 생긴 오류를 수정하는 디버깅 작업을 할 때도 편리하다.
   (오류난 부분만 고치면 편해진다.)
   
*** 하나의 함수에 하나의 기능을 구현하면 된다!!!!

6. 클래스 기능을 구현하는 메서드
: 자바 프로그램에는 클래스 내부에서 사용하는 맴버 함수가 있다. = 메서드 (맴버 변수를 사용하여 클래스의 기능을 구현한다)

getStudentName; = 학생이름을 가져온다.
setStudentName; = 학생이름을 지정한다.

*** 이름 짓기 규약
: 낙타 표기법(camel notation) 
예) setStudentName 이런 식으로 작성한다. 
-------------------------------------------------------------------------------
package 이름은 모두 '소문자'로 만든다.
class 이름은 앞문장을 '대문자'로 만든다.
변수와 메서드 이름은 '소문자'로 시작하여 중간에 '대문자'를 섞어주어 가독성을 높인다.
-------------------------------------------------------------------------------