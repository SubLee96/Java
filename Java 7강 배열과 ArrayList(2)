Java Programming

7) 배열과 ArrayList(2)

7-2) 다차원 배열이란?
: 지금까지 배운 배열은 모두 행 하나로 이루어진 '일차원 배열'이었다.
: 3차원 이상의 배열을 사용하면 '다차원 배열'이라 칭한다.

# 이차원 배열
- 자료형   배열이름        행 개수 열 개수
- int[][] arr = new  int[2]  [3];

-----------------
이차원 배열 초기화하기
-------------------------------------------------------------------------------
package array;

public class TwoDimension {
	public static void main(String[] args) {
		int[][]arr = {{1, 2, 3}, {4, 5, 6}};	//이차원 배열 선언과 동시에 초기화
		
		for(int i = 0; i < arr.length; i++) {
			for(int j = 0; j < arr[i].length; j++) {
				System.out.println(arr[i][j]);
			}
			System.out.println();	//행 출력 끝난 후 줄 띄움
		}
	}
}
-------------------------------------------------------------------------------
1
2
3

4
5
6
-------------------------------------------------------------------------------
: i는 행을, j는 열을 가리킨다. 
: 전체 길이인 arr.length는 행의 개수를, 행의 개수를 각 행의 길이 arr[i].length는 열의 개수를


# 나 혼자 코딩해보기
: 알파벳 소문자를 2글자씩 13줄(13행 2열)로 출력하는 프로그램을 이차원 배열로 구현하라.
-------------------------------------------------------------------------------
package alone;

public class TwoDimension {
	public static void main(String[] args) {
		char[][] alphabets = new char[13][2];
		char ch = 'a';
		
		for(int i = 0; i < alphabets.length; i++) {
			for(int j = 0; j < alphabets[i].length; j++) {
				alphabets[i][j] = ch;
				System.out.print(alphabets[i][j] + " ");
				ch++;
			}
			System.out.println();  //개행
		}
	}
}
-------------------------------------------------------------------------------
a b 
c d 
e f 
g h 
i j 
k l 
m n 
o p 
q r 
s t 
u v 
w x 
y z 
-------------------------------------------------------------------------------

= 행의 길이와 열의 길이 알아보기
-------------------------------------------------------------------------------
package array;

public class TwoDimension2 {

	public static void main(String[] args) {
		int[][] arr = new int[2][3];
		int k = 1;
		
		for(int i = 0; i < arr.length; i++) {
			for(int j = 0; j < arr[i].length; j++) {
				arr[i][j] = k;
				System.out.println(arr[i][j]);
				k++;
			}
			System.out.println();
		}
		System.out.println(arr.length);
		System.out.println(arr[0].length);
	}

}
-------------------------------------------------------------------------------
1		//1행 1열 ~ 1행 3열
2
3

4		//2행 1열 ~ 2행 3열
5
6

2		//행 길이
3		//열 길이
-------------------------------------------------------------------------------


7-3) ArrayList 클래스 사용하기

# 기존 배열의 단점과 ArrayList
: 기본 배열은 프로그램에서 사용하려면 항상 배열 길이를 정하고 시작한다.
> 배열을 사용하는 중에는 배열 길이를 변경할 수 없기에 코드를 수정해주어야 한다.
  즉, 변경 및 수정 사항이 발생할 경우에 모든 코드를 확인하고 찾아볼 수 없기에 ArrayList를 사용한다.
  
: ArrayList 클래스는 객체 배열을 관리할 수 있는 맴버 변수와 메서드를 제공한다. 

--------------------------------------------------------------------
메서드					설명
boolean add(E e)		요소 하나를 배열에 추가한다. E는 요소의 자료형을 의미한다.
int size()				배열에 추가된 요소 전체 개수를 반환한다.
E get(int index)		배열의 index 위치에 있는 요소 값을 반환한다.
E remove(int index)		배열의 index 위치에 있는 요소 값을 제거하고 그 값을 반환한다.
boolean isEmpty()		배열이 비어 있는지 확인한다.
--------------------------------------------------------------------

# ArrayList 클래스 활용하기
: ArrayList를 사용할 때 어떤 자료형 객체를 사용하여 프로그래밍할 것이닞 선언할 수 있다.

-----------------
ArrayList 기본 형식
------------------------------------------
ArrayList<E> 배열 이름 = new ArrayList<E>();
------------------------------------------
: <E>는 generics 자료형이라 칭한다.

예) ArrayList<Book> library = new ArrayList<Book>();

: ArrayList는 java.util 패키지에 구현되어 있는 클래스이다.
: 현재 만든 프로그램에는 java.util 패키지가 포함되어 있지 않기에 ArrayList를 사용하기 위해서는 컴파일러에게
  ArrayList가 어디에 구현되어 있는지 알려줘야 한다.
  => import를 사용한다.
  > "import java.util.ArrayList;" 문장을 꼭 써줘야 한다.

ArrayList 클래스 사용하기
--------------------------------------------------------------------
package array;

import java.util.ArrayList;	//ArrayList를 import 해준 모습

public class ArrayListTest {
	public static void main(String[] args) {
		 //ArrayList 선언
		ArrayList<Book> library = new ArrayList<Book>();
		
		//add() 메서드로 요소 값 추가
		library.add(new Book("태백산맥", "조정래"));
		library.add(new Book("데미안", "헤르만 헤세"));
		library.add(new Book("연금술사", "파울로 코엘료"));
		library.add(new Book("토지", "박경리"));
		library.add(new Book("어린왕자", "생택쥐페리"));
		
		//배열에 추가된 요소 개수만큼 출력
		for(int i = 0; i < library.size(); i++) {
			Book book = library.get(i);
			book.showBookInfo();
		}
		System.out.println();
		
		System.out.println("=== 향상된 for문 사용 ===");
		for(Book book : library) {
			book.showBookInfo();
		}
	}
}
--------------------------------------------------------------------
태백산맥, 조정래
데미안, 헤르만 헤세
연금술사, 파울로 코엘료
토지, 박경리
어린왕자, 생택쥐페리

=== 향상된 for문 사용 ===
태백산맥, 조정래
데미안, 헤르만 헤세
연금술사, 파울로 코엘료
토지, 박경리
어린왕자, 생택쥐페리
--------------------------------------------------------------------
: 기본 배열에서는 [] 안에 배열 전체 길이를 미리 지정해주어야 했다.
> ArrayList를 생성할 때는 미리 지정할 필요 없이 add() 메서드를 사용해 생성자만 호출했다.

# 나 혼자 코딩하기
: Student 클래스를 이용해 StudentArrayList 클래스를 만들고 ArrayList<Student> 자료형의
ArrayList를 선언한다.
: 학생 3명 추가하기
--------------------------------------------------------------------
package alone;

import java.util.ArrayList;

public class ArrayListTest2 {
	public static void main(String[] args) {
		ArrayList<Student>  classRoom= new ArrayList<Student>();
		
		classRoom.add(new Student(1001, "James"));
		classRoom.add(new Student(1002, "Tomas"));
		classRoom.add(new Student(1003, "Edward"));
		
		for(int i = 0; i < classRoom.size(); i++) {
			Student student = classRoom.get(i);
			student.showStudentInfo();
		// classRoom.get(i).showStudentInfo();
		}
	}
}
--------------------------------------------------------------------
1001 ,James
1002 ,Tomas
1003 ,Edward
--------------------------------------------------------------------


7-4) 배열 응용 프로그램
: ArrayList를 사용해 학생 성적 출력 프로그램을 구현할 예정이다.
> Student 클래스와 Subject 클래스를 만들어 변수를 대입한다.

Student 클래스 구현
--------------------------------------------------------------------
package arraylist;

import java.util.ArrayList;

public class Student {
	//Student 클래스 맴버 변수
	int studentID;
	String studentName;
	ArrayList<Subject> subjectList; //ArrayList 선언하기
	
	//생성자
	public Student(int studentID, String studentName) {
		this.studentID = studentID;
		this.studentName = studentName;
		subjectList = new ArrayList<Subject>();	//ArrayList 생성하기
	}
	
	//학생이 수강하는 과목을 subjectList 배열에 하나씩 추가하는 메서드
	public void addSubject(String name, int score) {
		Subject subject = new Subject();	//Subject 생성하기
		subject.setName(name);				//과목 이름 추가하기
		subject.setScorePoint(score);		//점수 추가하기
		subjectList.add(subject);			//배열에 저장하기
	}
	
	//배열 요소 값 출력
	public void showStudentInfo() {
		int total = 0;
		for(Subject s : subjectList) {
			total += s.getScorePoint();	//총점 더하기
			System.out.println("학생 : " + studentName + "의 " + s.getName() +
					" 과목 성적은 " + s.getScorePoint() + "입니다.");
		}
		System.out.println("학생 : " + studentName + "의 총점은 " + total + "입니다.");
	}
}
--------------------------------------------------------------------

Subject 클래스 구현
--------------------------------------------------------------------
package arraylist;

public class Subject {
	//Subject클래스 맴버 변수
	private String name;	//과목 이름
	private int scorePoint;	//과목 점수
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getScorePoint() {
		return scorePoint;
	}
	public void setScorePoint(int scorePoint) {
		this.scorePoint = scorePoint;
	}
}
--------------------------------------------------------------------

테스트 클래스 구현하기
--------------------------------------------------------------------
package arraylist;

public class StudentTest {
	public static void main(String[] args) {
		Student studentLee = new Student(1001, "Lee");
		studentLee.addSubject("국어", 100);
		studentLee.addSubject("수학", 100);
		
		Student studentJ = new Student(1002, "James");
		studentJ.addSubject("국어", 50);
		studentJ.addSubject("수학", 60);
		studentJ.addSubject("영어", 100);
		
		studentLee.showStudentInfo();
		System.out.println("=============================");
		studentJ.showStudentInfo();
	}
}
--------------------------------------------------------------------
학생 : Lee의 국어 과목 성적은 100입니다.
학생 : Lee의 수학 과목 성적은 100입니다.
학생 : Lee의 총점은 200입니다.
=============================
학생 : James의 국어 과목 성적은 50입니다.
학생 : James의 수학 과목 성적은 60입니다.
학생 : James의 영어 과목 성적은 100입니다.
학생 : James의 총점은 210입니다.
--------------------------------------------------------------------
