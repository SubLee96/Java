Java Programming

3) 자바의 여러 가지 연산자(기본 연산자)
: 사칙 연산자, 비교 연산자, 비트 단위 연산자 등등...

3-1) 기본 연산자
= 항과 연산자
연산자(operator) : 연산에 사용하는 기호
항(operand) : 연산에 사용하는 값

단항 연산자, 이항 연산자, 삼항 연산자 등으로 나뉜다.
-------------------------------------------------------------------------------
연산자		설명				연산 예
단항 연산자	항이 한 개인 연산자	++num
이항 연산자	항이 두 개인 연산자	num1 + num2
삼항 연산자 	항이 세 개인 연산자	(5>3)? 1:0;
-------------------------------------------------------------------------------
연산자 간에는 우선순위가 있는데 단항이 가장 높고, 삼항이 가장 낮다.

= 대입 연산자(assignment operator)
: 변수에 값을 대입하는 연산자 (이항 연산자 중에서 가장 순위가 낮은 연산자)

=> 왼쪽 변수 = 오른쪽 변수(또는 식)
	int age = 24; //나이를 의미하는 age변수에 값 24를 대입함.
	totalScore = mathScore + engScore;
	
- 왼쪽 변수(LValue)와 오른쪽 변수(RValue)
: 항상 rValue 값을 가져와서 lValue에 대입하게 된다.
	  > 변수나 숫자       >항상 변수나 상수가 온다.

= 부호 연산자
: +, - 두 가지가 있다. (부호로 사용되는 단항 연산자가 되기도 한다.)
-------------------------------------------------------------------------------
연산자	기능							연산 예
+		변수나 상수 값을 양수로 만든다.		+3
-		변수나 상수 값을 음수로 만든다.		-3
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
int num = 10;

System.out.println(+num);	//값 10이 그대로 출력된다.
System.out.println(-num);	//값 10에 -가 붙어서 출력되지만 num 값이 실제로 바뀌지는 않는다.
System.out.println(num);	//값 10이 그대로 출력된다.

num = -num;					//num 값을 음수로 바꿔서 다시 num에 대입한다.
System.out.println(num);	//값 -10이 출력된다. 
-------------------------------------------------------------------------------


= 산술 연산자
: 사칙 연산에서 사용하는 연산자
덧셈(+), 뺄셈(-), 곱셈(*), 나눗셈(/), 나머지(%)가 있다. 
-------------------------------------------------------------------------------
연산자 	기능											연산 예
+		두 항을 더한다.									5 + 3
-		앞에 있는 항에서 뒤에 있는 항을 뺀다.				5 - 3
*		두 항을 곱한다.									5 * 3
/		앞에 있는 항에서 뒤에 있는 항을 나누어 몫을 구한다.		5 / 3
%		앞에 있는 항에서 뒤에 있는 항을 나누어 나머지를 구한다.	5 % 3 : 프로그램을 짤때, 종종 유용하게 사용된다.
-------------------------------------------------------------------------------
- 산술 연산자의 우선순위
: 일반 수학의 산술 연산과 동일하다.
*, /, % 다음 +, - 순이다.

# 산술 연산자를 사용하여 총점과 평균 구하기
-------------------------------------------------------------------------------
package chap3;

public class OperationEx1 {
	public static void main(String[] args) {
		int mathScore = 90;
		int engScore = 70;
		int korScore = 100;
		
		int totalScore = mathScore + engScore + korScore;	//총점 구하기
		System.out.println(totalScore);
		
		double avgScore = totalScore / 3;
		System.out.println(avgScore);						//평균 구하기
	}
}
-------------------------------------------------------------------------------
260
86.0
-------------------------------------------------------------------------------


= 증가, 감소 연산자
: 단항 연산자로 연산자 앞이나 뒤에 사용하며 값을 1만큼 늘리거나 줄인다. 

-------------------------------------------------------------------------------
연산자	기능					연산 예
++		항의 값에 1을 더한다.	val = ++num	//먼저 num 값이 1증가한 후 val 변수에 대입
							val = num++ //val 변수에 기존 num 값을 먼저 대입한 후 num값 1 증가
--		항의 값에 1을 뺀다.		val = --num //먼저 num 값이 1감소한 후 val 변수에 대입
							val = num-- // val 변수에 기존 num 값을 먼저 대입한 후 num값 1 감소
-------------------------------------------------------------------------------

#증가, 감소 연산자를 사용하여 값 연산하기
-------------------------------------------------------------------------------
package chap3;

public class OperationEx2 {
	public static void main(String[] args) {
		int gameScore = 150;			//게임에서 획득한 점수는 150점
		
		int lastScore1 = ++gameScore;	//gameScore에 1만큼 더란 값을 lastScore1에 대입
		System.out.println(lastScore1); //151
		
		int lastScore2 = --gameScore;		//gameScore에 1만큼 뺀 값을 lastScore2에 대입
		System.out.println(lastScore2);		//150
	}
}
-------------------------------------------------------------------------------
151
150
-------------------------------------------------------------------------------

- 증가, 감소 연산자의 위치

int value = 10;
int num = ++value; //num에 11이 대입됨.

int value = 10;
int num = value++; //num에 10이 대입됨.


= 관계 연산자
: 항이 두 개인 이항 연산자(두 개의 항 중 어느 것이 더 큰지, 작은지, 같은지 여부를 검사한다.
결괏값은 참(true) 또는 거짓(false)로 나타난다.

-------------------------------------------------------------------------------
연산자	기능													연산 예
>		왼쪽 항이 크면 참을, 아니면 거짓을 반환한다.					num > 3;
<		왼쪽 항이 작으면 참을, 아니면 참을 반환한다.					num < 3;
>=		왼쪽 항이 오른쪽 항보다 크거나 같으면 참, 아니면 거짓을 반환한다.	num >= 3;
<=		왼쪽 항이 오른쪽 항보다 작거나 같으면 참, 아니면 거짓을 반환한다.	num <= 3;
==		두 개 항의 값이 같으면 참, 아니면 거짓을 반환한다.				num == 3;
!=		두 개 항의 값이 다르면 참, 아니면 거짓을 반환한다.				num != 3;
-------------------------------------------------------------------------------

예)
int myAge = 27;
boolean value = (myAge > 25);		-> 가독성을 위해서 (  )를 사용한다.
System.out.println(value); //true


= 논리 연산자
: 두 명제가 모두 참이면 논리 곱은 참, 두 명제 중 하나만 참이면 논리 합은 참

-------------------------------------------------------------------------------
연산자		기능										연산 예
&&			두 항이 모두 참인 경우에만 결과 값이 참이다.		boolean val =
(논리 곱)		그렇지 않은 경우는 거짓이다.					 (5>3) && (5>2);
||			두 항 중 하나만 참이면 결과 값은 참이다.			boolean val =
(논리 합)		두 항이 모두 거짓이면 결과 값은 거짓이다.			 (5>3) || (5<2);
!			단항 연산자로 참인 경우는 거짓이고,				boolean val = !(5>3);
(부정)		거짓인 경우는 참이다.							
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
int num1 = 10;
int num2 = 20;

boolean flag = (num1 > 0) && (num2 > 0);
System.out.println(flag);	//flag는 참

flag = (num1 < 0) && (num2 > 0);
System.out.println(flag);	//flag는 거짓

flag = (num1 < 0) || (num2 > 0);
System.out.println(flag);	//flag는 참
-------------------------------------------------------------------------------

#단락 회로 평가
-------------------------------------------------------------------------------
package chap3;

public class OperationEx3 {
	public static void main(String[] args) {
		int num1 = 10;
		int i = 2;
		
		boolean value = ((num1 = num1 + 10) < 10) && ((i = i + 2) < 10); // 논리 곱에서 앞 항이 거짓이므로 뒷 문장은 실행되지 않는다.
		System.out.println(value);
		System.out.println(num1);
		System.out.println(i);
		
		value = ((num1 = num1 + 10) > 10) || ((i = i + 2) < 10);	// 논리 합에서 앞 항의 결과값이 참이므로 뒷 문장은 실행되지 않는다.
		System.out.println(value);
		System.out.println(num1);
		System.out.println(i);
	}
}
-------------------------------------------------------------------------------
false
10
2
true
20
2
-------------------------------------------------------------------------------


= 복합 대입 연산자
: 개입 연산자와 다른 연산자를 조합해 하나의 연산자처럼 사용하는 연산자(우선순위가 가장 낮은 연산자이다.)

-------------------------------------------------------------------------------
연산자	기능											연산 예
+=		두 항의 값을 더해서 왼쪽 항에 대입					num1 += 2;
													num1 = num1 + 2;와 동일하다
-=		왼쪽 항에서 오른쪽 항을 빼서 그 값을 왼쪽 항에 대입		num1 -= 2;
													num1 = num1 - 2;와 동일하다
*=		두 항의 값을 곱해서 왼쪽 항에 대입					num1 *= 2;
													num1 = num1 * 2;와 동일하다
/=		왼쪽 항을 오른쪽 항으로 나누어 그 몫을 왼쪽 항에 대입	num1 /= 2;
													num1 = num1 / 2;와 동일하다
%=		비트를 왼쪽을 이동하고 그 값을 왼쪽 항에 대입			num1 &= 2;
													num1 = num1 % 2;와 동일하다
<<=		비트를 왼쪽으로 이동하고 그 값을 왼쪽 항에 대입			num1 <<= 2;
													num1 = num1 << 2;와 동일하다
>>=		비트를 오른쪽으로 이동하고 그 값을 왼쪽 항에 대입		num1 >>= 2;
		(왼쪽에 채워지는 비트 값은 부호 비트와 동일)    		num1 = num1 >> 2;와 동일하다
>>>=	비트를 오른쪽으로 이동하고 그 값을 왼쪽 항에 대힙		num1 >>>= 2;
		(왼쪽에 채워지는 비트 값은 0이다)					num1 = num1 >>> 2;와 동일하다
&=		두 항의 & 비트 연산 후 그 값을 왼쪽 항에 대입			num1 &= num2;
													num1 = num1 & num2;와 동일하다
|=		두 항의 | 비트 연산 후 그 값을 왼쪽 항에 대입			num1 |= num2;
													num1 = num1 | num2;와 동일하다
^=		두 항의 ^ 비트 연산 후 그 값을 왼쪽 항에 대입			num1 ^= num2;
													num1 = num1 ^ num2;와 동일하다
-------------------------------------------------------------------------------


- 조건 연산자
: 연산에 필요한 항의 개수는 3개이다. (삼항 연산자라 칭한다)
-------------------------------------------------------------------------------
연산자				기능							연산 예
조건식 ? 결과1 : 결과2	조건식이 참이면 결과1, 조건식이 	int num = (5 > 3) ? 10 : 20;  => 참이기 때문에 10을 선택!
					거짓이면 결과2가 선택됨.
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
package chap3;

public class OperationEx4 {
	public static void main (String[] args) {
		int fatherAge = 45;
		int motherAge = 47;
		
		char ch;
		ch = (fatherAge > motherAge) ? 'T' : 'F';
		
		System.out.println(ch);
	}
}
-------------------------------------------------------------------------------
F
-------------------------------------------------------------------------------
=> 조건식이 거짓이기에 'F'값이 반환된다.

예제
-------------------------------------------------------------------------------
int num = 10;
boolean isEven;
isEven = (num % 2) == 0 ? true : false;
System.out.println(isEven);
-------------------------------------------------------------------------------
