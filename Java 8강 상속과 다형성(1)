Java Programming

8) 상속과 다형성(1)
: 객체 지향 프로그램에서 지원하는 여러 기술을 활용하면 재사용성, 확장성이 좋고 유지보수가 수월한 프로그램을
  생성할 수 있다.
  
8-1) 상속이란?
: 상속(inheritance) : 부모 클래스에게 물려받은 맴버 변수와 메서드를 자식 클래스가 사용가능한 상황
					> 유지보수하기 편하고 프로그램을 수정하거나 새로운 내용을 추가하는 과정이 유용하다.
					
# 클래스의 상속
: 하위 클래스에서 상위 클래스로 화살표 방향이 진행된다.(상속)

= 클래스 상속 문법
: extends 예약어 사용
----------------------
class B extends A { }
----------------------

예)
class Mammal { }
class Human extends Mammal { }
-> Human 클래스가 Mammal 클래스에게 상속 받는다는 의미

: 하위 클래스는 상위 클래스보다 구체적인 클래스가 된다.

# 상속을 이용하여 고객 관리 프로그램 구현하기
: 회사에서 고객 정보를 가지고 맞춤 서비스를 제공하기 위해 "고객 관리 프로그램"을 구현하려 한다.
1) 기존 Customer 관리 시스템이 있었으나,
2) VIP 고객에게 필요한 변수와 메서드까지 함께 구현한다.
(VIPCustomer)
-------------------------------------------------------------------------------
package inheritance;

public class Customer {
	//맴버 변수
	private int customerID;		  //고객 아이디
	private String customerName;  //고객 이름
	private String customerGrade; //고객 등급
	int bonusPoint;				  //보너스 포인트
	double bonusRatio;			  //적립 비율
	
	//디폴트 생성자
	public Customer() {
		customerGrade = "Silver";	//기본 등급
		bonusRatio = 0.01;			//보너스 포인트 기본 적립 비율
	}
	
	//보너스 포인트 적립, 지불 가격 계산 메서드
	public int calcPrice(int price) {
		bonusPoint += price * bonusRatio;	//보너스 포인트 계산
		return price;
	}
	
	//고객 정보를 반환하는 메서드
	public String showCustomerInfo() {
		return customerName + " 님의 등급은 " + customerGrade + "이며, 보너스 포인트는 " + bonusPoint + "입니다.";
	}
}
-------------------------------------------------------------------------------
: 모든 맴버 변수를 반드시 private으로 선언할 필요는 없다. (필요에 따라 선언한다.)

-------------------------------------------------------------------------------
package inheritance;

//VIPCustomer 클래스는 Customer 클래스를 상속받음
public class VIPCustomer extends Customer{
	private int agentID;
	double salesRatio;
	
	public VIPCustomer() {
		customerGrade = "VIP"; //상위 클래스에서 private 변수이므로 오류 발생
		bonusRatio = 0.05;
		salesRatio = 0.1;
	}
	
	public int getAgentID() {
		return agentID;
	}
}
-------------------------------------------------------------------------------
문제점
1) customerGrade는 private이기에 오류가 발생하게 된다.(외부에서는 사용할 수 없다.)
2) VIP 고객에게 제공하는 혜택인 할인율과 세일 가격을 어떻게 적용할 것인지 구현하지 않았다.


= 상위 클래스 변수를 사용하기 위한 protected 예약어
: customerGrade 오류 수정하기
> protected는 상속받은 하위 클래스에서는 public과 동일한 효력을 가진다.
  (나머지 외부 클래스에서는 private과 동일한 역할을 한다.)
-------------------------------------------------------------------------------
package inheritance;

public class Customer {
	//맴버 변수
	protected int customerID;		  //고객 아이디
	protected String customerName;  //고객 이름
	protected String customerGrade; //고객 등급
	int bonusPoint;				  //보너스 포인트
	double bonusRatio;			  //적립 비율
	
	//디폴트 생성자
	public Customer() {
		customerGrade = "Silver";	//기본 등급
		bonusRatio = 0.01;			//보너스 포인트 기본 적립 비율
	}
	
	//보너스 포인트 적립, 지불 가격 계산 메서드
	public int calcPrice(int price) {
		bonusPoint += price * bonusRatio;	//보너스 포인트 계산
		return price;
	}
	
	//고객 정보를 반환하는 메서드
	public String showCustomerInfo() {
		return customerName + " 님의 등급은 " + customerGrade + "이며, 보너스 포인트는 " + bonusPoint + "입니다.";
	}

	public int getCustomerID() {
		return customerID;
	}

	public void setCustomerID(int customerID) {
		this.customerID = customerID;
	}

	public String getCustomerName() {
		return customerName;
	}

	public void setCustomerName(String customerName) {
		this.customerName = customerName;
	}
}
-------------------------------------------------------------------------------
: protected 예약어로 선언한 변수는 외부 클래스에는 private변수처럼 get()메서드와 set()메서드를 사용할 수 있다.
> Customer 클래스를 상속받는 VIPCustomer 클래스는 protected로 선언한 변수를 상속받게 된다.


= 테스트 프로그램 실행해보기
-------------------------------------------------------------------------------
package inheritance;

public class CustomerTest1 {
	public static void main(String[] args) {
		Customer customerLee = new Customer();
		customerLee.setCustomerID(10010);	//protected이므로 set()메서드 사용
		customerLee.setCustomerName("이윤섭");
		customerLee.bonusPoint = 1000;
		System.out.println(customerLee.showCustomerInfo());
		
		VIPCustomer customerJ = new VIPCustomer();
		customerJ.setCustomerID(10020);		//protected이므로 set()메서드 사용
		customerJ.setCustomerName("Lebron James");
		customerJ.bonusPoint = 10000;
		System.out.println(customerJ.showCustomerInfo());
	}
}
-------------------------------------------------------------------------------
이윤섭 님의 등급은 Silver이며, 보너스 포인트는 1000입니다.
Lebron James 님의 등급은 VIP이며, 보너스 포인트는 10000입니다.
-------------------------------------------------------------------------------


8-2) 상속에서 클래스 생성과 형 변환
: 클래스의 생성과정을 바라보면, 
1) 하위 클래스가 상위 클래스의 변수와 메서드를 사용할 수 있는 이유
2) 하위 클래스가 상위 클래스의 자료형으로 형 변환을 할 수 있는 이유
를 알 수 있다.

# 하위 클래스가 생성되는 과정
: 

-------------------------------------------------------------------------------
package inheritance;

public class Customer {
	//맴버 변수
	protected int customerID;		  //고객 아이디
	protected String customerName;  //고객 이름
	protected String customerGrade; //고객 등급
	int bonusPoint;				  //보너스 포인트
	double bonusRatio;			  //적립 비율
	
	//디폴트 생성자
	public Customer() {
		customerGrade = "Silver";	//기본 등급
		bonusRatio = 0.01;			//보너스 포인트 기본 적립 비율
		System.out.println("Customer() 생성자 호출"); //상위 클래스 생성할 때 콘솔 출력문
	}
	
	//보너스 포인트 적립, 지불 가격 계산 메서드
	public int calcPrice(int price) {
		bonusPoint += price * bonusRatio;	//보너스 포인트 계산
		return price;
	}
	
	//고객 정보를 반환하는 메서드
	public String showCustomerInfo() {
		return customerName + " 님의 등급은 " + customerGrade + "이며, 보너스 포인트는 " + bonusPoint + "입니다.";
	}

	public int getCustomerID() {
		return customerID;
	}

	public void setCustomerID(int customerID) {
		this.customerID = customerID;
	}

	public String getCustomerName() {
		return customerName;
	}

	public void setCustomerName(String customerName) {
		this.customerName = customerName;
	}
}
-------------------------------------------------------------------------------
package inheritance;

//VIPCustomer 클래스는 Customer 클래스를 상속받음
public class VIPCustomer extends Customer{
	private int agentID;
	double saleRatio;
	
	public VIPCustomer() {
		customerGrade = "VIP"; //상위 클래스에서 private 변수이므로 오류 발생
		bonusRatio = 0.05;
		saleRatio = 0.1;
		System.out.println("VIPCustomer() 생성자 호출"); //하위 클래스 생성할 때 콘솔 출력문
	}
	
	public int getAgentID() {
		return agentID;
	}
}
-------------------------------------------------------------------------------
package inheritance;

public class CustomerTest2 {
	public static void main(String[] args) {
		VIPCustomer customerJ = new VIPCustomer();
		customerJ.setCustomerID(10020);
		customerJ.setCustomerName("Lebron James");
		customerJ.bonusPoint = 10000;
		System.out.println(customerJ.showCustomerInfo());
	}
}
-------------------------------------------------------------------------------
Customer() 생성자 호출
VIPCustomer() 생성자 호출
Lebron James 님의 등급은 VIP이며, 보너스 포인트는 10000입니다.
-------------------------------------------------------------------------------
: 상위 클래스인 Customer() 생성자가 먼저 호출되고 그 다음에 VIPCustomer()가 호출된다.
> 반드시 상위 클래스가 먼저 호출되고 나서 하위 클래스가 생성된다.

힙 메모리
1) customerID
2) customerName
3) customerGrade		// Customer() 생성자 호출
4) bonusPoint			   -> Customer 클래스의 맴버 변수가 메모리에 생성된다.
=================
5) bonusRatio
6) agentID				// VIPCustomer() 생성자 호출
7) salesRatio			   -> VIPCustomer 클래스의 맴버 변수가 메모리에 생성된다.


# 부모를 부르는 예약어, super
: super예약어 : 하위 클래스에서 상위 클래스로 접근할 때 사용한다.
  > 하위 클래스는 상위 클래스의 주소(참조값)을 알고 싶어한다.
(this는 자신의 참조값을 가져오는 것)

= 상위 클래스 생성자 호출하기
-------------------------------------------------------------------------------
	public VIPCustomer() {
		super();
		customerGrade = "VIP"; //상위 클래스에서 private 변수이므로 오류 발생
		bonusRatio = 0.05;
		salesRatio = 0.1;
		System.out.println("VIPCustomer() 생성자 호출"); //하위 클래스 생성할 때 콘솔 출력문
	}
-------------------------------------------------------------------------------
: super()는 컴파일러가 자동으로 추가하는 코드, 상위 클래스의 Customer()가 호출된다.
  >디폴트 생성자가 호출된다.

-------------------------------------------------------------------------------
		//디폴트 생성자
		public Customer(int customerID, String customerName) {
			this.customerID = customerID;
			this.customerName = customerName;
			customerGrade = "Silver";	//기본 등급
			bonusRatio = 0.01;			//보너스 포인트 기본 적립 비율
			System.out.println("Customer() 생성자 호출"); //상위 클래스 생성할 때 콘솔 출력문
		}
-------------------------------------------------------------------------------
: 이런 식으로 this문을 추가하면 VIPCustomer에서 오류가 발생한다.
  > Customer()가 명시적으로 다른 생성자를 호출해야 한다!

------------
VIPCustomer
-------------------------------------------------------------------------------
	public VIPCustomer(int customerID, String customerName, int agentID) {
		super(customerID, customerName);	//상위 클래스 호출
		customerGrade = "VIP"; //상위 클래스에서 private 변수이므로 오류 발생
		bonusRatio = 0.05;
		salesRatio = 0.1;
		this.agentID = agentID;
		System.out.println("VIPCustomer() 생성자 호출"); //하위 클래스 생성할 때 콘솔 출력문
	}
-------------------------------------------------------------------------------
: super는 상위 클래스의 생성자를 호출하는 역할을 수행한다.
> super(customerID, customerName); 문장으로 상위 클래스 생성자를 호출한다.

--------------
CustomerTest3
-------------------------------------------------------------------------------
package inheritance;

public class CustomerTest3 {
	 public static void main(String[] args) {
		  VIPCustomer customerJ = new VIPCustomer(10020, "Lebron James", 12345);
		  // customerJ.setCustomerID(10020);
		  // customerJ.setCustomerName("Lebron James");
		  customerJ.bonusPoint = 10000;
		  System.out.println(customerJ.showCustomerInfo());
	 }
}
-------------------------------------------------------------------------------
Customer() 생성자 호출
VIPCustomer() 생성자 호출
Lebron James 님의 등급은 VIP이며, 보너스 포인트는 10000입니다.
-------------------------------------------------------------------------------


# 상위 클래스로 묵시적 클래스 형 변환
: VIPCustomer는 Customer형이면서 동시에 VIPCustomer형이기도 하다.
> VIPCustomer클래스로 인스턴스를 생성할 때, 이 인스턴스의 자료형을 Customer형으로 클래스 형 변환하여 
  선언할 수 있다.
  : 업캐스팅(upcasting)
  (단, 역은 성립할 수 없다. => VIPCustomer가 더 많은 기능을 담고 있으며 구체적이기 때문이다.)


8-3) 메서드 오버라이딩

# 상위 클래스 메서드 재정의하기
- 메서드 오버라이딩(method overriding)
  : 상위 클래스에 정의한 메서드가 하위 클래스에서 구현할 내용과 맞지 않을 경우에 하위 클래스에서
    이 메서드를 재정의할 수 있다.
> 조건 : 메서드 이름, 매개변수 개수, 매개변수 자료형이 반드시 같아야 한다.
  (그렇지 않으면 자바 컴파일러가 재정의한 메서드를 기존 메서드와 다른 메서드로 인식하게 된다.)

-----------------------
calcPrice() 메서드 정의하기
-------------------------------------------------------------------------------
package inheritance;

//VIPCustomer 클래스는 Customer 클래스를 상속받음
public class VIPCustomer extends Customer{
	private int agentID;
	double salesRatio;
	
	public VIPCustomer(int customerID, String customerName, int agentID) {
		super(customerID, customerName);	//상위 클래스 호출
		customerGrade = "VIP"; //상위 클래스에서 private 변수이므로 오류 발생
		bonusRatio = 0.05;
		salesRatio = 0.1;
		this.agentID = agentID;
	}
	
	public int getAgentID() {
		return agentID;
	}

	@Override
	public int calcPrice(int price) {
		bonusPoint += price * bonusRatio;			//보너스 포인트 적립
		return price - (int)(price * salesRatio);	//할인된 가격을 계산하여 반환
	}
	
}
-------------------------------------------------------------------------------
: @Override 애노테이션은 '이 메서드는 재정의된 메서드입니다.'라고 컴파일러에 명확히 알려 주는 역할을 수행한다.


=================================================================
애노테이션(Annotation)이란?
: @기호와 함께 사용하며 '@애노테이션 이름'으로 표현된다.
> java에서 애노테이션은 컴파일러에게 특정한 정보를 제공해 주는 역할을 수행한다.
--------------------------------------------------------------
애노테이션			     설명
@Override			 재정의된 메서드라는 정보 제공
@FunctionlInterface	 함수형 인터페이스라는 정보 제공
@Deprecated          이후 버전에서 사용되지 않을 수 있는 변수, 메서드에 사용됨
@SuppressWarnings    특정 경고가 나타나지 않도록 함`
--------------------------------------------------------------
이외에도 더 많은 정보를 추가할 수 있는 '메타 애노테이션'을 제공하고 있다.
=================================================================


--------------------
calcPrice() 테스트하기
-------------------------------------------------------------------------------
package inheritance;

public class OverridingTest1 {
	public static void main(String[] args) {
		Customer customerLee = new Customer(10010, "이윤섭");
		customerLee.bonusPoint = 1000;
		
		VIPCustomer customerJ = new VIPCustomer(10020, "Lebron James", 12345);
		customerJ.bonusPoint = 10000;
		
		int price = 10000;
		System.out.println(customerLee.getCustomerName() + "님이 지불해야 하는 금액은 "
		+ customerLee.calcPrice(price) + "원입니다.");
		System.out.println(customerJ.getCustomerName() + "님이 지불해야 하는 금액은 " 
		+ customerJ.calcPrice(price) + "원입니다."); 
	}
}
-------------------------------------------------------------------------------
이윤섭님이 지불해야 하는 금액은 10000원입니다.
Lebron James님이 지불해야 하는 금액은 9000원입니다.
-------------------------------------------------------------------------------


# 묵시적 형 변환과 메서드 재정의

Customer vc = new VIPCustomer("10030", "Kyrie Irving", 2000);
vc.calcPrice(10000);

-------------------------------------------------------------------------------
package inheritance2;

import inheritance.Customer;
import inheritance.VIPCustomer;

public class OverridingTest2 {

	public static void main(String[] args) {
		Customer vc = new VIPCustomer(10030, "Kyrie Irving", 2000);	//VIP고객 생성
		vc.bonusPoint = 1000;
		
		System.out.println(vc.getCustomerName() + " 님이 지불해야 하는 금액은 "
				+ vc.calcPrice(10000) + "원입니다.");
	}

}
-------------------------------------------------------------------------------
Kyrie Irving 님이 지불해야 하는 금액은 9000원입니다.
-------------------------------------------------------------------------------


# 가상 메서드
: 같은 객체의 인스턴스를 여러 개 생성한다고 해서 메서드도 여러 개 생성되지 않는다.

-------------------------------------------------------------------------------
package virtualfuntion;

public class TestA {
	int num;
	
	void aaa() {
		System.out.println("aaa() 출력");
	}
	
	public static void main(String[] args) {
		TestA a1 = new TestA();
		a1.aaa();
		TestA a2 = new TestA();
		a2.aaa();
	}
}
-------------------------------------------------------------------------------
aaa() 출력
aaa() 출력
-------------------------------------------------------------------------------

= 가상 메서드의 원리
: 일반적인 프로그램 
  : 메서드 호출 = 그 메서드의 명령 집합이 있는 메모리 위치를 참조하여 명령을 실행한다.
-> 가상 메서드 테이블이 따로 생성된다.

가상 메서드 : 생성된 인스턴스의 메서드가 호출된다. (모든 자바 메서드는 가상 메서드이다.)
