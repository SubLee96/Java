Java Programming

2) 변수와 자료형 (형 변환까지)

2-4) 상수와 리터럴
- 상수 선언하기
항상 변하지 않는 값 : 상수(constant)
java에서는 상수는 final 예약어를 사용하여 선언한다.

-------------------------------------------------------------------------------
final double PI = 3.14;
final int MAX_NUM = 100;
-------------------------------------------------------------------------------
-> 1. 상수는 대문자를 주로 사용한다.
   2. 여러 단어를 연결할 경우는 "_"를 사용하면 된다. 
   3. 한 번 선언한 상수는 변하지 않기 때문에 선언과 동시에 값을 지정하는 것이 좋다. 

-------------------------------------------------------------------------------
package chap2;

public class Constant {
	public static void main(String[] args) {
		final int MAX_NUM = 100;                => 선언과 동시에 초기화
		final int MIN_NUM;
		
		MIN_NUM = 0;							=> 사용하기 전에 초기화. 초기화하지 않으면 오류 발생
		
		System.out.println(MAX_NUM);
		System.out.println(MIN_NUM);
		
		//MAX_NUM = 1000; => 오류 발생. 상수는 값을 변경할 수 없음.
	}
}
-------------------------------------------------------------------------------
100
0
-------------------------------------------------------------------------------

- 상수를 사용하면 편리한 이유
: 프로그램 내부에서 반복적으로 사용되고 변하지 않아야 하는 값을 상수로 선언하여 사용하면 좋다.
=> 일일이 찾아가서 확인해줘야 하는 번거로움이 발생하게 된다. 

if(count == 30) {...}	//값이 30이라면				final int MAX_STUDENT_NUM = 35;		//값이 MAX_STUDENT_NUM이라면
while(i < 30) {...}		//30보다 작은 동안				if(count == MAX_STUDENT_NUM) {...}	//MAX_STUDENT_NUM보다 작은 동안
													while(i < MAX_STUDENT_NUM) {...}	
코드를 직접 사용하는 경우									상수로 선언하여 사용한 경우

예제 1)
-------------------------------------------------------------------------------
package chap2;

public class Practice1 {
	public static void main(String [] args) {
		final int MY_AGE = 22;			//상수 MY_AGE를 선언하고 값 22를 대입함
		System.out.println(MY_AGE);		//MY_AGE 값을 출력함
	}
}
-------------------------------------------------------------------------------


- 리터럴(literal)
: 프로그램에서 사용하는 모든 숫자, 문자, 논리값(true, false)을 일컫는 말이다.
예) 
char ch = 'A';
int num = 10;
final double PI = 3.14;     -> 오른쪽에 있는 값들을 '리터럴' 또는 '리터럴 상수'라 부른다.

: 리터럴은 프로그램이 시작할 때 시스템에 같이 로딩되어 특정 메모리 공간인 상수 풀(constant pool)에 놓인다. 
예) int num = 3; 은 문자에서 값 3이 메모리 공간 어딘가에 존재해야 num 변수에 그 값을 복사할 수 있다.
(숫자가 변수에 대입되는 과정은 일단 숫자 값이 어딘가 메모리에 쓰여 있고, 이 값이 다시 변수 메모리에 복사되는 것이다.)

: Java에서 정수를 표현하는 메모리의 기본 크기는 4바이트이다. 이는 상수 풀에서도 마찬가지다.
예) long num = 12,345,678,900; 은 4바이트 안에 들어갈 수 없기에 long형 즉, 8바이트로 처리해야한다.
	식별자 L이나 l을 적어주어 구분한다.


2-5) 형 변환
: 정수와 실수는 컴퓨터 내부에서 표현되는 방식과 전혀 다르다. "하나의 자료형으로 통일한 후 연산을 해야 한다."

int n = 10; 	// int형 변수 n에 정수 값 10을 대입
double dnum = n // int형 변수 n의 값을 double형 변수 dnum에 대입

** 묵시적 형변환과 명시적 형변환으로 나뉜다.

- 기본적인 형 변환 원칙들
1. 바이트 크기가 작은 자료형에서 큰 자료형으로 형 변환은 자동으로 이루어진다.
2. 덜 정밀한 자료형에서 더 정밀한 자료형으로 형 변환은 자동으로 이루어진다. 


- 묵시적 형 변환의 관계
정수								실수
byte => short => int => long => float => double
1바이트	2바이트	4바이트	8바이트로	4바이트	 8바이트
		char
		2바이트
		
: 화살표 방향과 반대로 형 변환을 하려면 강제로 해야한다. (이 경우 자료 손실이 발생할 가능성이 존재한다.)

1. 바이트 크기가 작은 자료형에서 큰 자료형으로 대입하는 경우
byte bNum = 10;
int iNum = bNUm;	//byte형 변수 bNum 값을 int형 변수 iNum에 대입함.

2. 덜 정밀한 자료형에서 더 정밀한 자료형으로 대입하는 경우
int iNum2 = 20;
float fNum = iNum2;

3. 연산 중에 자동 변환되는 경우
int iNum = 20;
float fNum = iNum;
double dNum;
dNum = fNum + iNum;

=> 이런 식으로 작은 수에서 큰 수로, 덜 정밀한 수에서 정밀한 수로 변환되는 경우에는 자동 형 변환이 이루어진다.

-------------------------------------------------------------------------------
package chap2;

public class ImplicitConversion {
	public static void main(String [] args) {
		byte bNum = 10;
		int iNum = bNum;
		
		System.out.println(bNum);
		System.out.println(iNum);
		
		int iNum2 = 20;
		float fNum = iNum2;
		
		System.out.println(iNum2);
		System.out.println(fNum);
		
		double dNum;
		dNum = fNum + iNum;
		System.out.println(dNum);
	}
}
-------------------------------------------------------------------------------
10
10
10
20.0
30.0
-------------------------------------------------------------------------------

- 명시적 형 변환

1. 바이트 크기가 큰 자료형에서 작은 자료형으로 대입하는 경우
int iNum = 10;
byte bNum = (byte)iNum; //강제로 형을 바꾸려면 바꿀 형을 괄호를 써서 명시해야 함.
: byte형은 1바이트로 int형보다 크기가 작기 때문에 자료 손실이 발생할 수 있다. 따라서 변활할 자료형을 명시적으로 써준다.(강제 형 변환)

int iNum = 1000;
byte bNum = (byte)iNum;
: 1000이 byte의 유효 범위를 넘어서기 때문에 자료 손실이 발생하여 -24가 나오게 된다.

2. 더 정밀한 자료형에서 덜 정밀한 자료형으로 대입하는 경우
double dNum = 3.14;
int iNum2 = (int)dNum; //실수 자료형 double을 정수 자료형 int로 형 변환
: 소수점 이하는 생략되고 3이라는 정수만 나오게 된다.

예제 2)
-------------------------------------------------------------------------------
package chap2;

public class Practice2 {
	public static void main(String [] args) {
		char ch1 = 'A';
		System.out.println((int)ch1);	// 문자에 해당하는 정수 값 출력
		
		int ch2 = 67;
		System.out.println((char)ch2);	// 정수 값에 해당하는 문자 출력
	}
}
-------------------------------------------------------------------------------
65
C
-------------------------------------------------------------------------------

3. 연산 중 형 변환
-------------------------------------------------------------------------------
package chap2;

public class ExplicitConversion {
	public static void main(String [] args) {
		double dNum1 = 1.2;
		float fNum2 = 0.9F;
		
		int iNum3 = (int)dNum1 + (int)fNum2;	//두 실수가 각각 형 변환되어 더해짐
		int iNum4 = (int)(dNum1 + fNum2);		//두 실수의 합이 먼저 계산되고 형 변환됨.
		System.out.println(iNum3);
		System.out.println(iNum4);
	}
}

-------------------------------------------------------------------------------
1
2
-------------------------------------------------------------------------------
=> 같은 형 변환이더라도 언제 이루어졌는지에 따라서 그 결괏값이 달라질 수 있다.



